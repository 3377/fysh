#!/bin/bash

# 全局变量
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSH_MANAGER_DIR="$HOME/.ssh_manager"
SSH_DIR="$SSH_MANAGER_DIR"
KEY_NAME="drfykey"
HOSTS_FILE="$SSH_MANAGER_DIR/hosts"
CURRENT_USER="$(whoami)"
CURRENT_HOST="$(hostname)"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

# WebDAV配置
WEBDAV_BASE_URL="https://pan.hstz.com"
WEBDAV_PATH="/dav"
WEBDAV_FULL_URL="${WEBDAV_BASE_URL}${WEBDAV_PATH}"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 输出信息
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

success() {
    echo -e "${BLUE}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# 测试WebDAV连接
test_webdav() {
    local user="$1"
    local pass="$2"
    
    info "测试WebDAV连接..."
    
    # 创建一个临时文件
    local temp_file="test_${TIMESTAMP}.tmp"
    echo "test" > "$temp_file"
    
    # 尝试上传临时文件
    if ! curl -s -f -T "$temp_file" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"; then
        error "无法连接到WebDAV服务器"
        rm -f "$temp_file"
        return 1
    fi
    
    # 检查文件是否存在
    if ! curl -s -f -X PROPFIND --header "Depth: 1" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file" >/dev/null 2>&1; then
        error "无法验证WebDAV上传"
        rm -f "$temp_file"
        return 1
    fi
    
    # 删除临时文件
    curl -s -f -X DELETE -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"
    rm -f "$temp_file"
    
    info "WebDAV连接测试成功"
    return 0
}

# 清理现有配置
clean_local_config() {
    info "清理本地配置..."
    rm -rf "$SSH_MANAGER_DIR"
    mkdir -p "$SSH_MANAGER_DIR"
    chmod 700 "$SSH_MANAGER_DIR"
}

# 初始化配置
init_config() {
    info "初始化配置目录..."
    
    # 创建必要的目录
    mkdir -p "$SSH_MANAGER_DIR"
    chmod 700 "$SSH_MANAGER_DIR"
    
    # 确保hosts文件存在
    touch "$HOSTS_FILE"
    chmod 600 "$HOSTS_FILE"
}

# 生成新的SSH密钥对
generate_keys() {
    info "生成新的SSH密钥对..."
    ssh-keygen -t rsa -b 4096 -f "$SSH_DIR/$KEY_NAME" -N "" -C "Generated by SSH Manager for $CURRENT_USER@$CURRENT_HOST"
    chmod 600 "$SSH_DIR/$KEY_NAME"
    chmod 644 "$SSH_DIR/$KEY_NAME.pub"
    
    # 自动将当前主机添加到授权列表
    echo "$CURRENT_USER@$CURRENT_HOST" >> "$HOSTS_FILE"
    chmod 600 "$HOSTS_FILE"
    
    info "SSH密钥对已生成"
    return 0
}

# 下载文件
download_file() {
    local url="$1"
    local output="$2"
    local user="$3"
    local pass="$4"

    # 使用 -L 参数跟随重定向，并检查文件内容
    if ! curl -s -f -L -o "$output" -u "$user:$pass" "$url"; then
        error "下载失败: $url"
        return 1
    fi

    # 验证文件内容
    if grep -q "^<!DOCTYPE\|^<html\|^<a href=" "$output"; then
        error "下载的文件包含HTML内容，可能是重定向页面"
        return 1
    fi

    # 确保文件不为空
    if [ ! -s "$output" ]; then
        error "下载的文件为空"
        return 1
    fi

    return 0
}

# 从WebDAV下载文件
download_from_webdav() {
    local user="$1"
    local pass="$2"
    local temp_dir
    temp_dir=$(mktemp -d)
    local key_exists=false
    
    info "正在从WebDAV下载文件..."
    
    # 检查WebDAV上是否存在密钥
    if curl -s -f -I -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}" >/dev/null 2>&1; then
        info "WebDAV上存在密钥，正在下载..."
        
        # 下载私钥
        if curl -s -f -L -o "${temp_dir}/${KEY_NAME}" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}" && \
           ! grep -q "^<!DOCTYPE\|^<html\|^<a href=" "${temp_dir}/${KEY_NAME}" && \
           [ -s "${temp_dir}/${KEY_NAME}" ]; then
            
            # 下载公钥
            if curl -s -f -L -o "${temp_dir}/${KEY_NAME}.pub" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}.pub" && \
               ! grep -q "^<!DOCTYPE\|^<html\|^<a href=" "${temp_dir}/${KEY_NAME}.pub" && \
               [ -s "${temp_dir}/${KEY_NAME}.pub" ]; then
                
                # 验证密钥对的有效性
                if ssh-keygen -l -f "${temp_dir}/${KEY_NAME}" >/dev/null 2>&1; then
                    key_exists=true
                    info "成功下载有效的密钥对"
                else
                    warn "下载的密钥对无效"
                fi
            fi
        fi
    fi

    # 处理密钥
    if [ "$key_exists" = true ]; then
        info "使用WebDAV上的现有密钥"
        mv "${temp_dir}/${KEY_NAME}" "$SSH_DIR/$KEY_NAME"
        mv "${temp_dir}/${KEY_NAME}.pub" "$SSH_DIR/${KEY_NAME}.pub"
        chmod 600 "$SSH_DIR/$KEY_NAME"
        chmod 644 "$SSH_DIR/${KEY_NAME}.pub"
    else
        if [ -f "$SSH_DIR/$KEY_NAME" ] && [ -f "$SSH_DIR/${KEY_NAME}.pub" ]; then
            warn "WebDAV上没有有效的密钥，但本地存在密钥，将上传本地密钥"
        else
            info "WebDAV上没有密钥，生成新的密钥对..."
            generate_keys
            info "新密钥对将在后续上传到WebDAV"
        fi
    fi
    
    # 下载主机列表
    if curl -s -f -L -o "${temp_dir}/hosts" -u "$user:$pass" "$WEBDAV_FULL_URL/hosts" && \
       ! grep -q "^<!DOCTYPE\|^<html\|^<a href=" "${temp_dir}/hosts" && \
       [ -s "${temp_dir}/hosts" ]; then
        info "合并主机列表..."
        mv "${temp_dir}/hosts" "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    else
        warn "主机列表下载失败或无效，创建新的列表"
        : > "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    fi
    
    rm -rf "$temp_dir"
    return 0
}

# 上传文件到WebDAV
upload_to_webdav() {
    local user="$1"
    local pass="$2"
    
    info "正在上传文件到WebDAV..."
    
    # 上传私钥（如果本地存在）
    if [ -f "$SSH_DIR/$KEY_NAME" ]; then
        if ! curl -s -f -T "$SSH_DIR/$KEY_NAME" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}"; then
            error "私钥上传失败"
            return 1
        fi
    fi
    
    # 上传公钥（如果本地存在）
    if [ -f "$SSH_DIR/${KEY_NAME}.pub" ]; then
        if ! curl -s -f -T "$SSH_DIR/${KEY_NAME}.pub" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}.pub"; then
            error "公钥上传失败"
            return 1
        fi
    fi
    
    # 上传主机列表
    if [ -f "$HOSTS_FILE" ]; then
        if ! curl -s -f -T "$HOSTS_FILE" -u "$user:$pass" "$WEBDAV_FULL_URL/hosts"; then
            error "主机列表上传失败"
            return 1
        fi
    fi
    
    success "文件上传成功"
    return 0
}

# 授权当前主机
authorize_current_host() {
    local pub_key
    pub_key=$(cat "$SSH_DIR/${KEY_NAME}.pub")
    if ! grep -q "$pub_key" "$HOSTS_FILE"; then
        echo "$pub_key" >> "$HOSTS_FILE"
        success "已授权当前主机: $CURRENT_HOST"
    else
        warn "当前主机已经被授权"
    fi
}

# 批量授权主机
batch_authorize_hosts() {
    local hosts_file="$1"
    if [ ! -f "$hosts_file" ]; then
        error "主机列表文件不存在: $hosts_file"
        return 1
    fi

    while IFS= read -r host; do
        if [ -n "$host" ]; then
            if ! grep -q "$host" "$HOSTS_FILE"; then
                echo "$host" >> "$HOSTS_FILE"
                success "已授权主机: $host"
            else
                warn "主机已经被授权: $host"
            fi
        fi
    done < "$hosts_file"
}

# 显示授权主机列表
list_hosts() {
    echo
    info "授权主机列表："
    if [ -f "$HOSTS_FILE" ]; then
        if [ -s "$HOSTS_FILE" ]; then
            # 显示主机列表，每行前面加上 "- "
            while IFS= read -r line; do
                echo "  - $line"
            done < "$HOSTS_FILE"
        else
            echo "  (空)"
        fi
    else
        echo "  (空)"
        touch "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    fi
}

# 显示菜单
show_menu() {
    echo -e "\n${BLUE}=== SSH Manager 菜单 ===${NC}"
    echo "1) 查看授权主机列表"
    echo "2) 授权当前主机"
    echo "3) 批量授权主机"
    echo "4) 同步到WebDAV"
    echo "5) 从WebDAV同步"
    echo "6) 退出"
    echo -e "${YELLOW}请选择操作 [1-6]:${NC} "
}

# 处理菜单选择
handle_menu() {
    local choice
    while true; do
        show_menu
        read -r choice
        case $choice in
            1)
                list_hosts
                ;;
            2)
                authorize_current_host
                ;;
            3)
                echo -e "${YELLOW}请输入主机列表文件路径:${NC} "
                read -r hosts_file
                batch_authorize_hosts "$hosts_file"
                ;;
            4)
                if upload_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    success "文件已成功上传到WebDAV"
                fi
                ;;
            5)
                if download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    success "文件已成功从WebDAV下载"
                fi
                ;;
            6)
                success "感谢使用！"
                exit 0
                ;;
            *)
                warn "无效的选择，请重试"
                ;;
        esac
    done
}

# 显示帮助信息
show_help() {
    echo "SSH Key Manager - 帮助信息"
    echo "用法: $0 <用户名> <密码>"
    echo
    echo "功能:"
    echo "- 生成SSH密钥对"
    echo "- WebDAV同步"
    echo "- 批量部署公钥"
    echo "- 主机连接测试"
    echo "- 授权主机管理"
}

# 主程序
main() {
    # 检查参数
    if [ $# -eq 2 ]; then
        WEBDAV_USER="$1"
        WEBDAV_PASS="$2"
        
        # 测试WebDAV连接
        if ! test_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
            exit 1
        fi
        
        # 清理现有配置
        clean_local_config
        
        # 初始化新的配置目录
        init_config
        
        # 从WebDAV下载配置
        info "从WebDAV同步配置..."
        if ! download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
            error "配置同步失败"
            exit 1
        fi
        
        # 授权当前主机
        authorize_current_host
        
        # 上传更新后的配置到WebDAV
        info "上传更新后的配置到WebDAV..."
        if ! upload_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
            error "配置上传失败"
            exit 1
        fi
        
        success "初始配置完成"
        
        # 显示交互式菜单
        handle_menu
    else
        show_help
        exit 1
    fi
}

main "$@"
