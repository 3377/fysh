#!/bin/bash

# 全局变量
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSH_MANAGER_DIR="$HOME/.ssh_manager"
SSH_DIR="$SSH_MANAGER_DIR"
KEY_NAME="drfykey"
HOSTS_FILE="$SSH_MANAGER_DIR/hosts"
CURRENT_USER="$(whoami)"
CURRENT_HOST="$(hostname)"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

# WebDAV配置
WEBDAV_BASE_URL="https://pan.hstz.com"
WEBDAV_PATH="/dav/ssh_manager"
WEBDAV_FULL_URL="${WEBDAV_BASE_URL}${WEBDAV_PATH}"

# ANSI颜色代码
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# 日志函数
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 测试WebDAV连接
test_webdav() {
    local user="$1"
    local pass="$2"
    
    info "测试WebDAV连接..."
    
    # 创建一个临时文件
    local temp_file="test_${TIMESTAMP}.tmp"
    echo "test" > "$temp_file"
    
    # 尝试上传临时文件
    if ! curl -s -f -T "$temp_file" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"; then
        error "无法连接到WebDAV服务器"
        rm -f "$temp_file"
        return 1
    fi
    
    # 检查文件是否存在
    if ! curl -s -f -X PROPFIND --header "Depth: 1" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file" >/dev/null 2>&1; then
        error "无法验证WebDAV上传"
        rm -f "$temp_file"
        return 1
    fi
    
    # 删除临时文件
    curl -s -f -X DELETE -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"
    rm -f "$temp_file"
    
    info "WebDAV连接测试成功"
    return 0
}

# 清理现有配置
clean_local_config() {
    info "清理本地配置..."
    rm -rf "$SSH_MANAGER_DIR"
    mkdir -p "$SSH_MANAGER_DIR"
    chmod 700 "$SSH_MANAGER_DIR"
}

# 初始化配置
init_config() {
    info "初始化配置目录..."
    
    # 创建必要的目录
    mkdir -p "$SSH_MANAGER_DIR"
    chmod 700 "$SSH_MANAGER_DIR"
    
    # 确保hosts文件存在
    touch "$HOSTS_FILE"
    chmod 600 "$HOSTS_FILE"
}

# 初始化环境
init_env() {
    info "初始化环境..."
    
    # 创建必要的目录
    mkdir -p "$SSH_MANAGER_DIR"
    chmod 700 "$SSH_MANAGER_DIR"
    
    # 确保hosts文件存在
    touch "$HOSTS_FILE"
    chmod 600 "$HOSTS_FILE"
}

# 生成新的SSH密钥对
generate_keys() {
    info "生成新的SSH密钥对..."
    
    # 确保目录存在
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"
    
    # 删除可能存在的旧密钥
    rm -f "$SSH_DIR/$KEY_NAME" "$SSH_DIR/${KEY_NAME}.pub"
    
    # 生成新的密钥对
    ssh-keygen -t rsa -b 4096 -f "$SSH_DIR/$KEY_NAME" -N "" -C "Generated by SSH Manager for $USER@$(hostname)"
    
    if [ $? -eq 0 ] && [ -f "$SSH_DIR/$KEY_NAME" ] && [ -f "$SSH_DIR/${KEY_NAME}.pub" ]; then
        chmod 600 "$SSH_DIR/$KEY_NAME"
        chmod 644 "$SSH_DIR/${KEY_NAME}.pub"
        info "SSH密钥对已生成"
        return 0
    else
        error "SSH密钥对生成失败"
        return 1
    fi
}

# 下载文件
download_file() {
    local url="$1"
    local output_file="$2"
    local user="$3"
    local pass="$4"

    # 使用curl下载文件，添加-L参数处理重定向
    local response
    response=$(curl -s -k -L -w "%{http_code}" -u "$user:$pass" -o "$output_file" "$url")
    
    # 检查HTTP状态码
    if [ "$response" = "200" ] || [ "$response" = "201" ]; then
        # 验证文件是否下载成功
        if [ -s "$output_file" ]; then
            # 检查文件内容是否是HTML（可能是错误页面）
            if ! grep -q "^<!DOCTYPE\|^<html\|^<a href=" "$output_file"; then
                return 0
            else
                warn "下载的文件包含HTML内容，可能是错误页面"
                rm -f "$output_file"
                return 1
            fi
        else
            warn "下载的文件为空"
            rm -f "$output_file"
            return 1
        fi
    else
        warn "下载失败，HTTP状态码: $response"
        return 1
    fi
}

# 从WebDAV下载文件
download_from_webdav() {
    local user="$1"
    local pass="$2"
    local need_upload=false
    local key_exists=false
    
    info "正在从WebDAV下载文件..."
    
    # 检查目录是否存在，使用-L参数处理重定向
    if ! curl -s -k -L -I -u "$user:$pass" "$WEBDAV_FULL_URL" | grep -q "HTTP/.*[[:space:]]2"; then
        info "WebDAV目录不存在，将在上传时创建"
        need_upload=true
    fi
    
    # 创建临时目录用于验证下载的文件
    local temp_dir
    temp_dir=$(mktemp -d)
    
    # 下载私钥到临时目录
    if download_file "$WEBDAV_FULL_URL/$KEY_NAME" "${temp_dir}/${KEY_NAME}" "$user" "$pass"; then
        info "WebDAV上存在密钥，正在下载..."
        
        # 下载公钥到临时目录
        if download_file "$WEBDAV_FULL_URL/${KEY_NAME}.pub" "${temp_dir}/${KEY_NAME}.pub" "$user" "$pass"; then
            # 验证密钥对
            chmod 600 "${temp_dir}/${KEY_NAME}"
            if ssh-keygen -l -f "${temp_dir}/${KEY_NAME}" > /dev/null 2>&1; then
                info "成功下载有效的密钥对"
                info "使用WebDAV上的现有密钥"
                # 移动验证过的密钥到最终位置
                mv "${temp_dir}/${KEY_NAME}" "$SSH_DIR/$KEY_NAME"
                mv "${temp_dir}/${KEY_NAME}.pub" "$SSH_DIR/${KEY_NAME}.pub"
                chmod 600 "$SSH_DIR/$KEY_NAME"
                chmod 644 "$SSH_DIR/${KEY_NAME}.pub"
                key_exists=true
            else
                warn "下载的密钥对无效，需要生成新的密钥对"
                need_upload=true
            fi
        else
            warn "公钥下载失败，需要生成新的密钥对"
            need_upload=true
        fi
    else
        info "WebDAV上不存在密钥，需要生成新的密钥对"
        need_upload=true
    fi

    # 清理临时目录
    rm -rf "$temp_dir"

    # 如果没有有效的密钥，生成新的
    if [ "$key_exists" = false ]; then
        info "生成新的密钥对..."
        if ! generate_keys; then
            error "生成密钥对失败"
            return 1
        fi
        need_upload=true
    fi
    
    # 下载主机列表
    if download_file "$WEBDAV_FULL_URL/hosts" "$HOSTS_FILE" "$user" "$pass"; then
        info "下载到现有主机列表，进行合并..."
    else
        warn "主机列表下载失败，将创建新的主机列表"
        : > "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
        need_upload=true
    fi

    # 如果需要上传，执行上传操作
    if [ "$need_upload" = true ]; then
        info "上传新生成的配置到WebDAV..."
        if ! upload_to_webdav "$user" "$pass"; then
            error "配置上传失败"
            return 1
        fi
    fi
    
    return 0
}

# 上传文件到WebDAV
upload_to_webdav() {
    local user="$1"
    local pass="$2"
    
    info "正在上传文件到WebDAV..."
    
    # 确保目标目录存在
    if ! curl -s -k -X MKCOL -u "$user:$pass" "$WEBDAV_FULL_URL" > /dev/null 2>&1; then
        warn "创建WebDAV目录失败，目录可能已存在"
    fi
    
    # 上传私钥（如果本地存在）
    if [ -f "$SSH_DIR/$KEY_NAME" ]; then
        if ! curl -s -k -T "$SSH_DIR/$KEY_NAME" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}"; then
            error "私钥上传失败"
            return 1
        fi
    fi
    
    # 上传公钥（如果本地存在）
    if [ -f "$SSH_DIR/${KEY_NAME}.pub" ]; then
        if ! curl -s -k -T "$SSH_DIR/${KEY_NAME}.pub" -u "$user:$pass" "$WEBDAV_FULL_URL/${KEY_NAME}.pub"; then
            error "公钥上传失败"
            return 1
        fi
    fi
    
    # 上传主机列表
    if [ -f "$HOSTS_FILE" ]; then
        if ! curl -s -k -T "$HOSTS_FILE" -u "$user:$pass" "$WEBDAV_FULL_URL/hosts"; then
            error "主机列表上传失败"
            return 1
        fi
    fi
    
    success "文件上传成功"
    return 0
}

# 授权当前主机
authorize_current_host() {
    local hostname
    hostname=$(hostname)
    local timestamp
    # 使用date命令获取北京时间
    timestamp=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
    
    # 检查主机是否已经在列表中
    if grep -q "^${hostname}|" "$HOSTS_FILE"; then
        info "主机 ${hostname} 已在授权列表中"
    else
        # 添加新主机到列表（带时间戳）
        echo "${hostname}|${timestamp}" >> "$HOSTS_FILE"
        # 对主机列表去重，保留最新的记录
        sort -t'|' -k1,1 -u "$HOSTS_FILE" -o "$HOSTS_FILE"
        success "已授权当前主机: ${hostname} (${timestamp})"
    fi
    
    # 确保.ssh目录和authorized_keys文件存在且权限正确
    local ssh_dir="$HOME/.ssh"
    local auth_keys="$ssh_dir/authorized_keys"
    
    # 创建.ssh目录（如果不存在）
    if [ ! -d "$ssh_dir" ]; then
        mkdir -p "$ssh_dir"
        chmod 700 "$ssh_dir"
    fi
    
    # 创建authorized_keys文件（如果不存在）
    if [ ! -f "$auth_keys" ]; then
        touch "$auth_keys"
    fi
    
    # 设置正确的权限
    chmod 700 "$ssh_dir"
    chmod 600 "$auth_keys"
    
    # 获取公钥内容
    local pub_key
    pub_key=$(cat "$SSH_DIR/${KEY_NAME}.pub")
    
    # 检查公钥是否已存在于authorized_keys中
    if ! grep -qF "$pub_key" "$auth_keys"; then
        # 添加公钥到authorized_keys
        echo "$pub_key" >> "$auth_keys"
        info "已将公钥添加到 authorized_keys"
    else
        info "公钥已存在于 authorized_keys 中"
    fi
    
    # 验证authorized_keys文件的内容和权限
    if [ ! -s "$auth_keys" ]; then
        error "authorized_keys 文件为空"
        return 1
    fi
    
    # 验证公钥是否正确添加
    if ! grep -qF "$pub_key" "$auth_keys"; then
        error "公钥未能正确添加到 authorized_keys"
        return 1
    fi
    
    # 配置SSHD
    if [ -f "/etc/ssh/sshd_config" ]; then
        if configure_sshd; then
            success "SSH服务配置完成"
        else
            warn "SSH服务配置失败，可能需要手动配置"
        fi
    fi
    
    info "SSH密钥授权配置完成"
    return 0
}

# 显示授权主机列表
list_hosts() {
    echo
    info "授权主机列表："
    if [ -f "$HOSTS_FILE" ] && [ -s "$HOSTS_FILE" ] && ! grep -q "^<!DOCTYPE\|^<html\|^<a href=" "$HOSTS_FILE"; then
        echo "主机名                  授权时间"
        echo "----------------------------------------"
        while IFS='|' read -r host timestamp; do
            printf "%-22s %s\n" "$host" "$timestamp"
        done < "$HOSTS_FILE"
    else
        echo "暂无授权主机"
        : > "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    fi
}

# 显示功能帮助信息
show_feature_help() {
    local feature="$1"
    case $feature in
        "sync")
            echo "从WebDAV同步功能说明："
            echo "此功能用于从WebDAV服务器同步SSH密钥和主机授权列表。"
            echo
            echo "主要步骤："
            echo "1. 检查并下载WebDAV上的SSH密钥"
            echo "2. 验证密钥的有效性"
            echo "3. 同步主机授权列表"
            echo
            echo "注意事项："
            echo "- 确保WebDAV服务器可访问"
            echo "- 需要正确的用户名和密码"
            echo "- 同步过程中不会删除本地已有的授权"
            ;;
        "hosts")
            echo "授权主机列表功能说明："
            echo "此功能显示所有已授权的主机及其授权时间。"
            echo
            echo "显示信息："
            echo "- 主机名"
            echo "- 授权时间（北京时间）"
            echo
            echo "注意事项："
            echo "- 时间戳格式：YYYY-MM-DD HH:MM:SS"
            echo "- 列表按主机名排序"
            echo "- 重复授权会更新时间戳"
            ;;
        "help")
            show_help
            ;;
        *)
            error "未知的功能选项"
            ;;
    esac
}

# 处理菜单选择
handle_menu() {
    while true; do
        echo
        echo "=== SSH Manager 菜单 ==="
        echo "1. 查看授权主机列表"
        echo "2. 从WebDAV同步"
        echo "3. 上传授权列表到WebDAV"
        echo "4. 查看帮助信息"
        echo "0. 退出程序"
        echo "===================="
        
        read -p "请选择操作 [0-4]: " choice
        
        case $choice in
            1)
                echo
                if ! list_hosts; then
                    error "查看授权主机列表失败"
                    return 1
                fi
                ;;
            2)
                echo
                info "从WebDAV同步..."
                if [ -z "$WEBDAV_USER" ] || [ -z "$WEBDAV_PASS" ]; then
                    error "WebDAV凭据未设置"
                    return 1
                fi
                if download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    success "文件已成功从WebDAV同步"
                fi
                ;;
            3)
                info "上传授权列表到WebDAV..."
                if [ -z "$WEBDAV_USER" ] || [ -z "$WEBDAV_PASS" ]; then
                    error "WebDAV凭据未设置"
                    return 1
                fi
                if ! upload_hosts_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    error "授权列表上传失败"
                    return 1
                fi
                ;;
            4)
                echo
                show_help
                ;;
            0)
                info "退出程序"
                exit 0
                ;;
            *)
                error "无效的选择"
                ;;
        esac
    done
}

# 上传授权列表到WebDAV
upload_hosts_to_webdav() {
    local user="$1"
    local pass="$2"
    
    info "正在上传授权列表到WebDAV..."
    
    # 检查主机列表文件是否存在
    if [ ! -f "$HOSTS_FILE" ]; then
        error "授权列表文件不存在"
        return 1
    fi
    
    # 确保目标目录存在
    if ! curl -s -k -X MKCOL -u "$user:$pass" "$WEBDAV_FULL_URL" > /dev/null 2>&1; then
        warn "创建WebDAV目录失败，目录可能已存在"
    fi
    
    # 上传主机列表
    if curl -s -k -T "$HOSTS_FILE" -u "$user:$pass" "$WEBDAV_FULL_URL/hosts"; then
        success "授权列表上传成功"
        return 0
    else
        error "授权列表上传失败"
        return 1
    fi
}

# 显示帮助信息
show_help() {
    echo "SSH Manager - SSH密钥管理工具 v2.0.0"
    echo
    echo "使用方法: $0 <WebDAV用户名> <WebDAV密码>"
    echo
    echo "功能说明："
    echo "本工具用于管理多台服务器之间的SSH密钥同步和授权，通过WebDAV实现配置集中管理。"
    echo
    echo "主要功能："
    echo "1. 自动同步SSH密钥配置"
    echo "  - 从WebDAV获取统一的SSH密钥"
    echo "  - 自动配置本地SSH环境"
    echo "  - 确保所有服务器使用相同的密钥"
    echo
    echo "2. 自动授权管理"
    echo "  - 自动将当前主机添加到授权列表"
    echo "  - 维护带时间戳的主机授权记录"
    echo "  - 自动配置SSH服务"
    echo
    echo "3. 安全特性"
    echo "  - 自动设置正确的文件权限"
    echo "  - 配置文件自动备份"
    echo "  - 严格的密钥验证"
    echo
    echo "使用注意事项："
    echo "1. 首次使用："
    echo "  - 需要在第一台服务器上运行以初始化密钥"
    echo "  - 之后所有服务器将使用相同的密钥"
    echo
    echo "2. 权限要求："
    echo "  - 配置SSH服务需要root权限"
    echo "  - 建议使用root用户运行"
    echo
    echo "3. 文件位置："
    echo "  - 配置文件存储在: ~/.ssh_manager/"
    echo "  - SSH密钥存储在: ~/.ssh/"
    echo
    echo "4. WebDAV要求："
    echo "  - 需要可用的WebDAV服务器"
    echo "  - WebDAV服务器需要读写权限"
    echo
    echo "示例："
    echo "  $0 webdav_user webdav_password"
    echo
    echo "注意：请确保WebDAV服务器的安全性，因为它存储着重要的SSH配置。"
}

# 配置SSHD
configure_sshd() {
    local sshd_config="/etc/ssh/sshd_config"
    local needs_restart=false
    local backup_file="${sshd_config}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # 检查是否有root权限
    if [ "$(id -u)" -ne 0 ]; then
        error "配置SSHD需要root权限"
        return 1
    fi
    
    # 备份原配置文件
    info "备份当前SSH配置..."
    cp "$sshd_config" "$backup_file"
    
    # 配置PubkeyAuthentication
    if ! grep -q "^PubkeyAuthentication yes" "$sshd_config"; then
        info "启用公钥认证..."
        # 注释掉所有PubkeyAuthentication行
        sed -i 's/^PubkeyAuthentication.*/# &/' "$sshd_config"
        # 添加新的配置
        echo "PubkeyAuthentication yes" >> "$sshd_config"
        needs_restart=true
    fi
    
    # 配置AuthorizedKeysFile
    if ! grep -q "^AuthorizedKeysFile.*authorized_keys" "$sshd_config"; then
        info "配置授权密钥文件路径..."
        # 注释掉所有AuthorizedKeysFile行
        sed -i 's/^AuthorizedKeysFile.*/# &/' "$sshd_config"
        # 添加新的配置
        echo "AuthorizedKeysFile .ssh/authorized_keys" >> "$sshd_config"
        needs_restart=true
    fi
    
    # 如果需要，重启SSH服务
    if [ "$needs_restart" = true ]; then
        info "重启SSH服务..."
        if command -v systemctl >/dev/null 2>&1; then
            systemctl restart sshd
        else
            service ssh restart
        fi
        if [ $? -eq 0 ]; then
            success "SSH服务已重启"
        else
            error "SSH服务重启失败"
            return 1
        fi
    else
        info "SSH配置已是最新，无需重启"
    fi
    
    return 0
}

# 主程序入口
main() {
    if [ $# -eq 2 ]; then
        WEBDAV_USER="$1"
        WEBDAV_PASS="$2"
        
        # 初始化环境
        init_env
        
        # 从WebDAV下载配置
        info "从WebDAV下载配置..."
        if ! download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
            error "配置下载失败"
            exit 1
        fi
        
        # 配置SSHD
        if ! configure_sshd; then
            error "SSHD配置失败"
            exit 1
        fi
        
        # 授权当前主机
        authorize_current_host
        
        # 上传更新后的主机列表到WebDAV
        if [ -f "$HOSTS_FILE" ]; then
            if ! upload_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                error "主机列表上传失败"
                exit 1
            fi
        fi
        
        success "初始配置完成"
        
        # 显示交互式菜单
        handle_menu
    else
        show_help
        exit 1
    fi
}

# 执行主程序
main "$@"
