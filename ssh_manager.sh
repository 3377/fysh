#!/bin/bash

# 全局变量
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSH_MANAGER_DIR="$HOME/.ssh_manager"
SSH_DIR="$SSH_MANAGER_DIR"
KEY_NAME="drfykey"
HOSTS_FILE="$SSH_MANAGER_DIR/hosts"
CURRENT_USER="$(whoami)"
CURRENT_HOST="$(hostname)"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

# WebDAV配置
WEBDAV_BASE_URL="https://pan.hstz.com"
WEBDAV_PATH="/dav"
WEBDAV_FULL_URL="${WEBDAV_BASE_URL}${WEBDAV_PATH}"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 输出信息
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

success() {
    echo -e "${BLUE}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# 测试WebDAV连接
test_webdav() {
    local user="$1"
    local pass="$2"
    
    info "测试WebDAV连接..."
    
    # 创建一个临时文件
    local temp_file="test_${TIMESTAMP}.tmp"
    echo "test" > "$temp_file"
    
    # 尝试上传临时文件
    if ! curl -s -f -T "$temp_file" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"; then
        error "无法连接到WebDAV服务器"
        rm -f "$temp_file"
        return 1
    fi
    
    # 检查文件是否存在
    if ! curl -s -f -X PROPFIND --header "Depth: 1" -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file" >/dev/null 2>&1; then
        error "无法验证WebDAV上传"
        rm -f "$temp_file"
        return 1
    fi
    
    # 删除临时文件
    curl -s -f -X DELETE -u "$user:$pass" "$WEBDAV_FULL_URL/$temp_file"
    rm -f "$temp_file"
    
    info "WebDAV连接测试成功"
    return 0
}

# 初始化配置
init_config() {
    # 确保SSH管理目录存在
    if [ ! -d "$SSH_MANAGER_DIR" ]; then
        mkdir -p "$SSH_MANAGER_DIR"
        chmod 700 "$SSH_MANAGER_DIR"
    fi
    
    # 如果主机列表文件不存在，创建一个空文件
    if [ ! -f "$HOSTS_FILE" ]; then
        touch "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    fi
    
    # 创建备份目录
    if [ ! -d "$SSH_MANAGER_DIR/backups" ]; then
        mkdir -p "$SSH_MANAGER_DIR/backups"
        chmod 700 "$SSH_MANAGER_DIR/backups"
    fi
}

# 备份文件
backup_file() {
    local file="$1"
    local backup_dir="$SSH_MANAGER_DIR/backups"
    local backup_file="$backup_dir/$(basename "$file").bak.${TIMESTAMP}"
    
    if [ -f "$file" ]; then
        cp "$file" "$backup_file"
        chmod 600 "$backup_file"
    fi
}

# 生成新的SSH密钥对
generate_keys() {
    info "生成新的SSH密钥对..."
    ssh-keygen -t rsa -b 4096 -f "$SSH_DIR/$KEY_NAME" -N "" -C "Generated by SSH Manager for $CURRENT_USER@$CURRENT_HOST"
    chmod 600 "$SSH_DIR/$KEY_NAME"
    chmod 644 "$SSH_DIR/$KEY_NAME.pub"
    
    # 自动将当前主机添加到授权列表
    echo "$CURRENT_USER@$CURRENT_HOST" >> "$HOSTS_FILE"
    chmod 600 "$HOSTS_FILE"
    
    info "SSH密钥对已生成"
    return 0
}

# 上传文件到WebDAV
upload_to_webdav() {
    local user="$1"
    local pass="$2"
    
    info "上传文件到WebDAV..."
    
    # 上传私钥
    if ! curl -s -f -T "$SSH_DIR/$KEY_NAME" -u "$user:$pass" "$WEBDAV_FULL_URL/$KEY_NAME"; then
        error "私钥上传失败"
        return 1
    fi
    
    # 上传公钥
    if ! curl -s -f -T "$SSH_DIR/$KEY_NAME.pub" -u "$user:$pass" "$WEBDAV_FULL_URL/$KEY_NAME.pub"; then
        error "公钥上传失败"
        return 1
    fi
    
    # 上传主机列表
    if ! curl -s -f -T "$HOSTS_FILE" -u "$user:$pass" "$WEBDAV_FULL_URL/ssh_manager_hosts"; then
        error "主机列表上传失败"
        return 1
    fi
    
    info "文件上传完成"
    return 0
}

# 从WebDAV下载文件
download_from_webdav() {
    local user="$1"
    local pass="$2"
    
    info "正在从WebDAV下载文件..."
    
    # 使用PROPFIND检查文件是否存在
    if ! curl -s -f -X PROPFIND --header "Depth: 1" -u "$user:$pass" "$WEBDAV_FULL_URL/$KEY_NAME" >/dev/null 2>&1; then
        info "WebDAV上未找到现有配置"
        return 1
    fi
    
    # 创建临时目录
    local temp_dir=$(mktemp -d)
    local success=true
    
    # 下载私钥
    if download_file "$WEBDAV_FULL_URL/$KEY_NAME" "$temp_dir/$KEY_NAME" "$user" "$pass" "application/octet-stream" && \
       [ -s "$temp_dir/$KEY_NAME" ] && \
       ! grep -q "^<!DOCTYPE html>\|^<html>\|^<a href=" "$temp_dir/$KEY_NAME" 2>/dev/null; then
        chmod 600 "$temp_dir/$KEY_NAME"
    else
        error "私钥下载失败"
        success=false
    fi
    
    # 下载公钥
    if download_file "$WEBDAV_FULL_URL/$KEY_NAME.pub" "$temp_dir/$KEY_NAME.pub" "$user" "$pass" "application/octet-stream" && \
       [ -s "$temp_dir/$KEY_NAME.pub" ] && \
       ! grep -q "^<!DOCTYPE html>\|^<html>\|^<a href=" "$temp_dir/$KEY_NAME.pub" 2>/dev/null; then
        chmod 644 "$temp_dir/$KEY_NAME.pub"
    else
        error "公钥下载失败"
        success=false
    fi
    
    # 下载主机列表（如果存在）
    if download_file "$WEBDAV_FULL_URL/ssh_manager_hosts" "$temp_dir/ssh_manager_hosts" "$user" "$pass" "text/plain" 2>/dev/null; then
        if grep -q "^<!DOCTYPE html>\|^<html>\|^<a href=" "$temp_dir/ssh_manager_hosts" 2>/dev/null; then
            # 如果是HTML内容，创建新的空文件
            : > "$temp_dir/ssh_manager_hosts"
        fi
        chmod 600 "$temp_dir/ssh_manager_hosts"
    else
        # 如果下载失败，创建新的空文件
        : > "$temp_dir/ssh_manager_hosts"
        chmod 600 "$temp_dir/ssh_manager_hosts"
    fi
    
    # 如果密钥下载成功，移动文件到目标位置
    if [ "$success" = true ]; then
        # 备份现有文件
        backup_file "$SSH_DIR/$KEY_NAME"
        backup_file "$SSH_DIR/$KEY_NAME.pub"
        backup_file "$HOSTS_FILE"
        
        # 移动新文件到位
        mv "$temp_dir/$KEY_NAME" "$SSH_DIR/$KEY_NAME"
        mv "$temp_dir/$KEY_NAME.pub" "$SSH_DIR/$KEY_NAME.pub"
        mv "$temp_dir/ssh_manager_hosts" "$HOSTS_FILE"
        
        info "文件下载完成"
        rm -rf "$temp_dir"
        return 0
    else
        rm -rf "$temp_dir"
        return 1
    fi
}

# 显示授权主机列表
list_hosts() {
    echo
    info "授权主机列表："
    if [ -f "$HOSTS_FILE" ]; then
        if [ -s "$HOSTS_FILE" ]; then
            # 显示主机列表，每行前面加上 "- "
            while IFS= read -r line; do
                echo "  - $line"
            done < "$HOSTS_FILE"
        else
            echo "  (空)"
        fi
    else
        echo "  (空)"
        touch "$HOSTS_FILE"
        chmod 600 "$HOSTS_FILE"
    fi
}

# 显示菜单
show_menu() {
    echo -e "\n${BLUE}=== SSH Manager 菜单 ===${NC}"
    echo "1) 生成新的SSH密钥对"
    echo "2) 显示授权主机列表"
    echo "3) 同步到WebDAV"
    echo "4) 从WebDAV同步"
    echo "5) 退出"
    echo -e "${YELLOW}请选择操作 [1-5]:${NC} "
}

# 处理菜单选择
handle_menu() {
    local choice
    while true; do
        show_menu
        read -r choice
        case $choice in
            1)
                generate_keys
                ;;
            2)
                list_hosts
                ;;
            3)
                if upload_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    success "文件已成功上传到WebDAV"
                fi
                ;;
            4)
                if download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    success "文件已成功从WebDAV下载"
                fi
                ;;
            5)
                success "感谢使用！"
                exit 0
                ;;
            *)
                warn "无效的选择，请重试"
                ;;
        esac
    done
}

# 显示帮助信息
show_help() {
    echo "SSH Key Manager - 帮助信息"
    echo "用法: $0 <用户名> <密码>"
    echo
    echo "功能:"
    echo "- 生成SSH密钥对"
    echo "- WebDAV同步"
    echo "- 批量部署公钥"
    echo "- 主机连接测试"
    echo "- 授权主机管理"
}

# 主程序
main() {
    # 检查参数
    if [ $# -eq 2 ]; then
        WEBDAV_USER="$1"
        WEBDAV_PASS="$2"
        
        # 初始化配置
        init_config
        
        # 测试WebDAV连接
        if ! test_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
            exit 1
        fi
        
        # 如果是首次运行，先下载现有配置
        if [ ! -f "$SSH_DIR/$KEY_NAME" ]; then
            info "尝试从WebDAV下载现有配置..."
            if ! download_from_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                info "未找到现有配置，开始初始化..."
                generate_keys
                
                # 上传新生成的文件
                if ! upload_to_webdav "$WEBDAV_USER" "$WEBDAV_PASS"; then
                    error "文件上传失败"
                    exit 1
                fi
            fi
        fi
        
        # 显示交互式菜单
        handle_menu
    else
        show_help
        exit 1
    fi
}

main "$@"
